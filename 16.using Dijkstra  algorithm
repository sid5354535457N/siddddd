/*  16 Represent a graph of city using adjacency matrix /adjacency list. Nodes should
represent the various landmarks and links should represent the distance between
them. Find the shortest path using Dijkstra&#39;s algorithm from single source to all
destination.   */
#include <iostream>
#include <queue>
#include <limits>

using namespace std;

const int INF = numeric_limits<int>::max();

class Graph {
public:
    int vertices;
    int** adjacencyMatrix;

    Graph(int v) : vertices(v) {
        adjacencyMatrix = new int*[vertices];
        for (int i = 0; i < vertices; ++i) {
            adjacencyMatrix[i] = new int[vertices];
            fill(adjacencyMatrix[i], adjacencyMatrix[i] + vertices, INF);
            adjacencyMatrix[i][i] = 0;
        }
    }

    void addEdge(int src, int dest, int weight) {
        adjacencyMatrix[src][dest] = weight;
        adjacencyMatrix[dest][src] = weight;
    }

    void dijkstraShortestPath(int source);
};

void Graph::dijkstraShortestPath(int source) {
    int* distance = new int[vertices];
    fill(distance, distance + vertices, INF);
    distance[source] = 0;

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, source});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        for (int v = 0; v < vertices; ++v) {
            int weight = adjacencyMatrix[u][v];

            if (distance[u] + weight < distance[v]) {
                distance[v] = distance[u] + weight;
                pq.push({distance[v], v});
            }
        }
    }

    cout << "Shortest Distances from Source (" << source << ") to All Destinations:" << endl;
    for (int i = 0; i < vertices; ++i) {
        cout << "To " << i << ": " << (distance[i] == INF ? "INF" : to_string(distance[i])) << endl;
    }

    delete[] distance;
}

int main() {
    // Create a graph representing the city
    Graph cityGraph(5);

    cityGraph.addEdge(0, 1, 2);
    cityGraph.addEdge(0, 2, 4);
    cityGraph.addEdge(1, 2, 1);
    cityGraph.addEdge(1, 3, 7);
    cityGraph.addEdge(2, 4, 3);
    cityGraph.addEdge(3, 4, 1);

    // Find the shortest paths using Dijkstra's algorithm
    int sourceNode = 0;
    cityGraph.dijkstraShortestPath(sourceNode);

    for (int i = 0; i < cityGraph.vertices; ++i) {
        delete[] cityGraph.adjacencyMatrix[i];
    }
    delete[] cityGraph.adjacencyMatrix;

    return 0;
}

