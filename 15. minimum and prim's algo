/*  15 .Represent a graph of your college campus using adjacency list /adjacency matrix.
Nodes should represent the various departments/institutes and links should represent
the distance between them. Find minimum spanning tree
a) Using Primâ€™s algorithm. */
#include <iostream>
#include <queue>

using namespace std;

const int INF = 1e9; 

class Node {
public:
    int id;
    int weight;
    Node* next;

    Node(int i, int w) : id(i), weight(w), next(nullptr) {}
};

class Graph {
public:
    int vertices;
    Node** adjacencyList;

    Graph(int v) : vertices(v) {
        adjacencyList = new Node*[v];
        for (int i = 0; i < v; ++i) {
            adjacencyList[i] = nullptr;
        }
    }

    void addEdge(int src, int dest, int weight);

    void primMST();
};

void Graph::addEdge(int src, int dest, int weight) {
    Node* newNode = new Node(dest, weight);
    newNode->next = adjacencyList[src];
    adjacencyList[src] = newNode;

    newNode = new Node(src, weight);
    newNode->next = adjacencyList[dest];
    adjacencyList[dest] = newNode;
}

void Graph::primMST() {
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    int* key = new int[vertices];
    fill(key, key + vertices, INF);

    int* parent = new int[vertices];
    fill(parent, parent + vertices, -1);

    bool* inMST = new bool[vertices];
    fill(inMST, inMST + vertices, false);

    int startVertex = 0;

    pq.push({0, startVertex});
    key[startVertex] = 0;

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        inMST[u] = true;

        for (Node* neighbor = adjacencyList[u]; neighbor != nullptr; neighbor = neighbor->next) {
            int v = neighbor->id;
            int weight = neighbor->weight;

            if (!inMST[v] && weight < key[v]) {
                key[v] = weight;
                pq.push({key[v], v});
                parent[v] = u;
            }
        }
    }

    cout << "Edges in the Minimum Spanning Tree (Prim's Algorithm):" << endl;
    for (int i = 1; i < vertices; ++i) {
        cout << parent[i] << " -- " << i << " : " << key[i] << endl;
    }
}

int main() {
    Graph campusGraph(6);

    campusGraph.addEdge(0, 1, 2);
    campusGraph.addEdge(0, 2, 4);
    campusGraph.addEdge(1, 2, 1);
    campusGraph.addEdge(1, 3, 7);
    campusGraph.addEdge(2, 4, 3);
    campusGraph.addEdge(3, 4, 1);
    campusGraph.addEdge(3, 5, 5);
    campusGraph.addEdge(4, 5, 6);

    campusGraph.primMST();

    return 0;
}
