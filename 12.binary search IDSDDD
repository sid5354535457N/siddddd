/* 12 Implement binary search tree and perform following operations:
a) Insert (Handle insertion of duplicate entry)
b) Delete
c) Search
d) Display tree (Traversal)
e) Display leaf nodes
f) Display tree level wise */
#include <iostream>
#include <queue>

using namespace std;

// Node structure for the binary search tree
struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Function to insert a value into the binary search tree
Node* insert(Node* root, int value) {
    if (root == nullptr) {
        return new Node(value);
    }

    if (value < root->data) {
        root->left = insert(root->left, value);
    } else if (value > root->data) {
        root->right = insert(root->right, value);
    } else {
        // Handle duplicate entry (you can modify this part according to your requirements)
        cout << "Duplicate entry: " << value << endl;
    }

    return root;
}

// Function to delete a value from the binary search tree
Node* deleteNode(Node* root, int value) {
    if (root == nullptr) {
        return root;
    }

    if (value < root->data) {
        root->left = deleteNode(root->left, value);
    } else if (value > root->data) {
        root->right = deleteNode(root->right, value);
    } else {
        // Node with only one child or no child
        if (root->left == nullptr) {
            Node* temp = root->right;
            delete root;
            return temp;
        } else if (root->right == nullptr) {
            Node* temp = root->left;
            delete root;
            return temp;
        }

        // Node with two children: Get the inorder successor (smallest in the right subtree)
        Node* temp = root->right;
        while (temp->left != nullptr) {
            temp = temp->left;
        }

        // Copy the inorder successor's data to this node
        root->data = temp->data;

        // Delete the inorder successor
        root->right = deleteNode(root->right, temp->data);
    }

    return root;
}

// Function to search for a value in the binary search tree
bool search(Node* root, int value) {
    if (root == nullptr) {
        return false;
    }

    if (value == root->data) {
        return true;
    } else if (value < root->data) {
        return search(root->left, value);
    } else {
        return search(root->right, value);
    }
}

// Function to perform in-order traversal of the binary search tree
void inOrderTraversal(Node* root) {
    if (root) {
        inOrderTraversal(root->left);
        cout << root->data << " ";
        inOrderTraversal(root->right);
    }
}

// Function to display leaf nodes of the binary search tree
void displayLeafNodes(Node* root) {
    if (root) {
        if (root->left == nullptr && root->right == nullptr) {
            cout << root->data << " ";
        } else {
            displayLeafNodes(root->left);
            displayLeafNodes(root->right);
        }
    }
}

// Function to display the binary search tree level-wise
void displayLevelWise(Node* root) {
    if (root == nullptr) {
        return;
    }

    queue<Node*> q;
    q.push(root);

    while (!q.empty()) {
        int levelSize = q.size();
        for (int i = 0; i < levelSize; ++i) {
            Node* current = q.front();
            q.pop();
            cout << current->data << " ";

            if (current->left != nullptr) {
                q.push(current->left);
            }
            if (current->right != nullptr) {
                q.push(current->right);
            }
        }
        cout << endl;
    }
}

int main() {
    Node* root = nullptr;

    // Insertion
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);
    insert(root, 70);  // Duplicate entry

    // Display tree
    cout << "In-order traversal of the tree: ";
    inOrderTraversal(root);
    cout << endl;

    // Search
    int searchValue = 40;
    cout << "Search for value " << searchValue << ": " << (search(root, searchValue) ? "Found" : "Not Found") << endl;

    // Deletion
    int deleteValue = 30;
    root = deleteNode(root, deleteValue);

    // Display tree after deletion
    cout << "In-order traversal of the tree after deletion: ";
    inOrderTraversal(root);
    cout << endl;

    // Display leaf nodes
    cout << "Leaf nodes of the tree: ";
    displayLeafNodes(root);
    cout << endl;

    // Display tree level-wise
    cout << "Level-wise display of the tree:\n";
    displayLevelWise(root);

    return 0;
}
