/* 14 Represent a graph of your college campus using adjacency list /adjacency matrix.
Nodes should represent the various departments/institutes and links should represent
the distance between them. Find minimum spanning tree
a) Using Kruskalâ€™s algorithm.*/
#include <iostream>
#include <algorithm>

using namespace std;

class Edge {
public:
    int source, destination, weight;

    Edge() {}

    Edge(int src, int dest, int w) : source(src), destination(dest), weight(w) {}

    bool operator<(const Edge& other) const {
        return weight < other.weight;
    }
};

class Graph {
public:
    int vertices, edges;
    Edge* edgeArray;

    Graph(int v, int e) : vertices(v), edges(e) {
        edgeArray = new Edge[edges];
    }

    void addEdge(int index, int src, int dest, int weight) {
        edgeArray[index] = Edge(src, dest, weight);
    }

    Edge* kruskalMST();
};

class DisjointSet {
public:
    int* parent;
    int* rank;

    DisjointSet(int n) {
        parent = new int[n];
        rank = new int[n];

        for (int i = 0; i < n; ++i) {
            parent[i] = i;
            rank[i] = 0;
        }
    }

    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }

    void unionSets(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);

        if (rootX != rootY) {
            if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }
        }
    }
};

Edge* Graph::kruskalMST() {
    Edge* result = new Edge[vertices - 1];

    sort(edgeArray, edgeArray + edges);

    DisjointSet disjointSet(vertices);

    int i = 0, j = 0;

    while (i < vertices - 1 && j < edges) {
        const Edge& edge = edgeArray[j];

        int rootSource = disjointSet.find(edge.source);
        int rootDest = disjointSet.find(edge.destination);

        if (rootSource != rootDest) {
            result[i++] = edge;
            disjointSet.unionSets(rootSource, rootDest);
        }

        j++;
    }

    return result;
}

int main() {
    Graph campusGraph(6, 8);

    campusGraph.addEdge(0, 0, 1, 2);
    campusGraph.addEdge(1, 0, 2, 4);
    campusGraph.addEdge(2, 1, 2, 1);
    campusGraph.addEdge(3, 1, 3, 7);
    campusGraph.addEdge(4, 2, 4, 3);
    campusGraph.addEdge(5, 3, 4, 1);
    campusGraph.addEdge(6, 3, 5, 5);
    campusGraph.addEdge(7, 4, 5, 6);

    Edge* mst = campusGraph.kruskalMST();

    cout << "Edges in the Minimum Spanning Tree (Kruskal's Algorithm):" << endl;
    for (int i = 0; i < campusGraph.vertices - 1; ++i) {
        cout << mst[i].source << " -- " << mst[i].destination << " : " << mst[i].weight << endl;
    }

    return 0;
}
